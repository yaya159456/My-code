
'''二叉树的四种遍历 广度优先：层遍历   深度优先：前序，中序，后序遍历'''
class Node:
    def __init__(self, value=None, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right
def pre_traverse(root):#递归实现前序遍历
    if root == None:
        return
    '''
        root == None 和 root is None 的区别,None
        判断是否为空3种方法：1）if root is (not) None 2) if not root 3)if not root is None 
        第一种最好 没有歧义,用第二种时注意 None,  False, 空字符串"", 0, 空列表[], 空字典{}, 空元组()都相当于False
        root==None 等于 not root 一般用 not root ==判断值是否相等 is判断是否一样 （is None） 百度： is None 和 not的区别
    '''
    print(root.value)
    pre_traverse(root.left)
    pre_traverse(root.right)
def mid_traverse(root):#递归中序遍历
    if root is None:
        return
    mid_traverse(root.left)
    print(root.value)
    mid_traverse(root.right)
def after_traverse(root):#递归后序遍历
    if root is None:
        return
    after_traverse(root.left)
    after_traverse(root.right)
    print(root.value)
def queue(root):#队列实现层遍历 非递归
    if not root:
        return
    myqueue = []
    node = root
    myqueue.append(node)
    while myqueue:
        node = myqueue.pop(0)
        print(node.value)
        if node.left:
            myqueue.append(node.left)
        if node.right:
            myqueue.append(node.right)
root = Node(1, Node(2, Node(3), Node(4)), Node(5, right=Node(6, Node(7))))
# root = Node('D', Node('B', Node('A'), Node('C')), Node('E', right=Node('G', Node('F'))))
print('前序遍历：')
pre_traverse(root)
print('中序遍历: ')
mid_traverse(root)
print('层遍历：')
queue(root)
